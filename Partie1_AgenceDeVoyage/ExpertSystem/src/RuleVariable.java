import java.util.*;

public class RuleVariable extends Variable {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
public RuleVariable(String Name) {
        super(Name);
        clauseRefs = new Vector<Clause>();
        }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void setValue(String val) { value = val;
                            updateClauses(); }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////prompt a user to provide a value for a variable during inferencing

String askUser() {
  String answer = RuleApplet.waitForAnswer(promptText, getLabels()) ; // show dialog
  RuleBase.appendText("\n  !!! Looking for " + name + ". User entered: " + answer) ;
  setValue(answer) ; // need to set value from textField here
  return value ;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Vector<Clause> clauseRefs ;   // clauses which refer to this var
void addClauseRef(Clause ref) { clauseRefs.addElement(ref) ; }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void updateClauses() {
   Enumeration<Clause> enum1 = clauseRefs.elements() ;
   while(enum1.hasMoreElements()) {
     ((Clause)enum1.nextElement()).check() ; // retest the truth condition
   }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

String promptText ;  // used to prompt user for value
String ruleName ;      // if value is inferred, null = user provided
void   setRuleName(String rname) { ruleName = rname; }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void   setPromptText(String text) { promptText = text; }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////these methods are not used in rule variables

public void computeStatistics(String inValue){} ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public int normalize(String inValue, float[] outArray, int inx) {return inx;}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}




